name: Chainweb History Validation

on:
  repository_dispatch:
    types: [request-history-validation]
  workflow_dispatch:
    inputs:
      os:
        description: Operating system that the jobs run on
        default: 'ubuntu-latest'
      version:
        description: chainweb-node version or revision that is used
        default: 'master'
      ghc_version:
        descritpion: GHC of the build that is used
        default: '8.10.2'
      chainweb_version:
        description: Chainweb version
        default: 'mainnet01'

env:
  S3_ARTIFACT_BUCKET: kadena-cabal-cache
  S3_ARTIFACT_FOLDER: chainweb-node
  DB_SNAPSHOT_URI: 's3://chainweb-chain-db/${{ github.event.inputs.chainweb_version }}/rocksdb/'
  AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}
  AWS_DEFAULT_REGION: us-east-1

jobs:

  # ########################################################################## #
  # Configure Workflow

  config:
    name: Configure Workflow
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.settings.outputs.os }}
      ghc_version: ${{ steps.settings.outputs.ghc_version }}
      version: ${{ steps.settings.outputs.version }}
      chainweb_version: ${{ steps.settings.outputs.chainweb_version }}
    steps:
    - name: Get input values
      id: settings
      run: |
        if [[ ${{ github.event_name }} = "workflow_dispatch" ]] ; then 
          echo "::set-output name=os::${{ github.event.inputs.os }}"
          echo "::set-output name=ghc_version::${{ github.event.inputs.ghc_version }}"
          echo "::set-output name=version::${{ github.event.inputs.version }}"
          echo "::set-output name=chainweb_version::${{ github.event.inputs.chainweb_version }}"
        elif [[ ${{ github.event_name }} = "repository_dispatch" ]] ; then

          if [[ -n "${{ github.event.client_payload.os }}" ]] ; then
            echo "::set-output name=os::${{ github.event.client_payload.os }}"
          else
            echo "::set-output name=os::ubuntu-latest"
          fi

          if [[ -n "${{ github.event.client_payload.ghc_version }}" ]] ; then
            echo "::set-output name=ghc_version::${{ github.event.client_payload.ghc_version }}"
          else
            echo "::set-output name=ghc_version::8.10.2"
          fi

          if [[ -n "${{ github.event.client_payload.version }}" ]] ; then
            echo "::set-output name=version::${{ github.event.client_payload.version }}"
          else
            echo "::set-output name=version::master"
          fi

          if [[ -n "${{ github.event.client_payload.chainweb_version }}" ]] ; then
            echo "::set-output name=chainweb_version::${{ github.event.client_payload.chainweb_version }}"
          else
            echo "::set-output name=chainweb_version::mainnet01"
          fi

        else
          echo "::error::unsupported event ${{ github.event_name }}"
          exit 1
        fi

  # ########################################################################## #
  # Validate headers

  validate-headers:
    name: Validate headers
    needs: [config]
    runs-on: ${{ needs.config.outputs.os }}
    steps:
    - name: Install non-Haskell dependencies
      run: |
        case "${{ needs.config.outputs.os }}" in
        ubuntu*)
          sudo apt-get install -y expect
          ;;
        mac*)
          brew install expect
          ;;
        *)
          echo "::error::unsupported operating system ${{ needs.config.output.os }}"
          exit 1
          ;;
        esac
    - name: install chainweb-node
      uses: larskuhtz/install-chainweb-action@master
      with:
        ghc_version: ${{ needs.config.outputs.ghc_version }}
        version: ${{ needs.config.outputs.version }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Check chainweb-node installation
      run: chainweb-node --version
    - name: Sync chain database from S3
      run: aws s3 sync "$DB_SNAPSHOT_URI" db/0/rocksDb --delete --exclude=LOCK
    - name: Write chainweb-node configuration file
      run: |
        cat >> config.yaml <<EOF
          databaseDirectory: "db"
          chainweb:
            chainwebVersion: ${{ needs.config.outputs.chainweb_version }}
            validateHashesOnReplay: false
            p2p:
              peer:
                hostaddress:
                  hostname: localhost
                  port: 4445
              private: true
              ignoreBootstrapNodes: true
            transactionIndex:
              enabled: false
            headerStream: false
            mempoolP2p:
              enabled: false
            cuts:
              pruneChainDatabase: headers-checked
          logging:
            telemetryBackend:
              enabled: false
            backend:
              handle: stdout
              color: "true"
            logger:
              log_level: info
              policy: block
            filter:
              rules:
              - key: component
                value: init
                level: info
              - key: component
                value: database-pruning
                level: info
              default: warn
        EOF
    - name: Validate block headers and check Merkle tree
      timeout-minutes: 60
      run: |
        unbuffer chainweb-node --config-file config.yaml |
        { sed -u -e '/finished pruning databases/q0;/\[Error\]/q1;$q2'; x=$? ; killall -9 chainweb-node; } ||
        true
        exit $x

  # ########################################################################## #
  # Validate Pact History

  validate-pact-history:
    name: Validate pact history
    needs: [config]
    runs-on: ${{ needs.config.outputs.os }}
    steps:
    - name: Install non-Haskell dependencies
      run: |
        case "${{ needs.config.outputs.os }}" in
        ubuntu*)
          sudo apt-get install -y expect
          ;;
        mac*)
          brew install expect
          ;;
        *)
          echo "::error::unsupported operating system ${{ needs.config.output.os }}"
          exit 1
          ;;
        esac
    - name: install chainweb-node
      uses: larskuhtz/install-chainweb-action@master
      with:
        ghc_version: ${{ needs.config.outputs.ghc_version }}
        version: ${{ needs.config.outputs.version }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Check chainweb-node installation
      run: chainweb-node --version
    - name: Sync chain database from S3
      run: aws s3 sync "$DB_SNAPSHOT_URI" db/0/rocksDb --delete --exclude=LOCK
    - name: Write chainweb-node configuration file
      run: |
        cat >> config.yaml <<EOF
          databaseDirectory: "db"
          chainweb:
            chainwebVersion: ${{ needs.config.outputs.chainweb_version }}
            validateHashesOnReplay: true
            p2p:
              peer:
                hostaddress:
                  hostname: localhost
                  port: 4445
              private: true
              ignoreBootstrapNodes: true
            transactionIndex:
              enabled: false
            headerStream: false
            mempoolP2p:
              enabled: false
            cuts:
              pruneChainDatabase: false
          logging:
            telemetryBackend:
              enabled: false
            backend:
              handle: stdout
              color: "True"
            logger:
              log_level: info
              policy: block
            filter:
              rules:
              - key: component
                value: init
                level: info
              default: warn
        EOF
    - name: Validate pact history
      timeout-minutes: 120
      run: |
        unbuffer chainweb-node --config-file config.yaml |
        { sed -u -e '/finished synchronizing Pact DBs/q0;/\[Error\]/q1;$q2'; x=$?; killall -9 chainweb-node; } ||
        true
        exit $x;
